---
description: Core template conventions for agents working across this monorepo.
alwaysApply: true
---

# Repository Overview
- Monorepo layout: `apps/web` (Vite/React), `apps/api` (FastAPI), `packages/shared` (TypeScript utils/types).
- pnpm workspaces; keep `pnpm-lock.yaml` intact. Use pnpm for all Node tasks.
- Docker Compose for dev: services `api`, `web`, `db` (Postgres with healthcheck).

# Tooling & Workflow
- Node 20+, Python 3.12+, TypeScript strict mode.
- Frontend: React 18 + Vite, TanStack Router/Query, Zustand, Tailwind + shadcn, lucide-react.
- Backend: FastAPI + Pydantic v2, async SQLAlchemy + asyncpg, stateless endpoints.
- Env vars: `VITE_STYTCH_PUBLIC_TOKEN`, `VITE_API_URL`, `VITE_APP_NAME`, `STYTCH_PROJECT_ID`, `STYTCH_SECRET`, `DATABASE_URL`, `APP_NAME`, `CSRF_SECRET_KEY`.

# Coding Standards
- Do not expose secrets in the client. Rely on HTTP-only cookies; validate sessions server-side with Stytch.
- Database access through repository layer in `apps/api/db/crud.py`. Avoid ad-hoc engine/session usage in routes.
- Frontend routes live in `apps/web/src/routes`; do not edit `routeTree.gen.ts` (generate via `pnpm --filter web run generate:routes`).
- Python: snake_case, 4-space indent. TypeScript: 2-space indent, PascalCase components, camelCase vars.

# Collaboration & Safety
- Ask before adding migrations or destructive DB ops (template auto-creates tables; no Alembic).
- Keep changes minimal and scoped; preserve existing stacks and conventions.
- Reference files with backticks; keep responses concise and actionable.

## Common Commands
- Dev: `make dev`, `pnpm --filter web dev`, `pnpm --filter api dev`.
- Build/Type-check: `pnpm -r build`, `pnpm -r type-check`.
- DB: `make db-up`, `make db-shell`.

